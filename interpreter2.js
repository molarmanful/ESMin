//Welcome to the annotated source code of the interpreter for [ùîºùïäùïÑùïöùïü 2](https://github.com/molarmanful/ESMin), a wonderful JavaScript ES6 golfing language created by [@molarmanful](https://github.com/molarmanful)!
//This will serve as documentation for those who want to learn the language.
// 
//---
// 
//Let's get started!
//---

//put the numbers.js library in the math object
math.import(numbers,{wrap:true,silent:true});

//- improved replace function
String.prototype.ireplace=function(x,y=''){return this.replace(x,y)};
//- recursive replace
String.prototype.rreplace=function(r,o='',t){t=this.replace(r,o);return t!=this?t.rreplace(r,o):t};
//- global replace
String.prototype.greplace=function(x,y='',f=''){return this.replace(RegExp(x,'g'+f),y)};
//- string reverse
String.prototype.reverse=function(){return[...this].reverse().join``};
//- matrix split
String.prototype.msplit=function(r='\n',c=''){return this.split(r).map(x=>x.split(c))};
//- transliterate (dictionary replace)
String.prototype.treplace=function(x,y,z={}){[...x].map((a,b)=>z[a]=y[b]);return this.replace(/./g,x=>z[x]===[]._?x:z[x])};

//prototype-based function aliasing
[String,Array,Number,Object,RegExp,Date,s,_,XRegExp,Function,Pen].map(v=>Object.getOwnPropertyNames(v.prototype).map((x,y)=>v.prototype[String.fromCharCode(y+248)]=v.prototype[x]));
//object-based function aliasing
[math,String,Array,Number,Object,JSON,RegExp,XRegExp,Date,_,s,window,Function].map(v=>Object.getOwnPropertyNames(v).map((x,y)=>v[String.fromCharCode(y+248)]=v[x]));
//function alias helper: use as `alias(Array,METHOD_NAME_STRING)`
var alias=(v,w)=>Object.getOwnPropertyNames(v).map((x,y)=>v[String.fromCharCode(y+248)]==v[w]?String.fromCharCode(y+248):0).join``.replace(/0/g,'');
//char palette helper
var chpal=`InOut: √Ø √Æ √≠ √¨ ·¥â √¥
Zeros: ‚Ö© ‚Ñç ùïú ùïÑ ùîæ ùïã ‚Ñô ùîº ‚Ñ§ ùïê
Stack: Œû ·µñ ·µç  ≥ ·∂ú
Const: ·ªã  â ‚Ñá …∏ œÄ œÑ ‚ä® ‚ä≠ ·ï†
Built: –ú œö —¶ –ü √ò  ù …º ‚±§ ·∂Ç ·∂Å ◊© —® √ü Íùà ·∂è ¬™ ·∂ä Œµ √´ ‚±Æ ’Ö ÷É ·µ¥ ·∂ê ·∂õ …ò —ç –≠ ∆á ‚Ñπ
Basic: ‚äï ¬§ ‚Çô ·∂â ‚Ä¶
Paren: ‚∏© ‚ÅΩ ‚éõ ‚éù ‚éû ‚¶Ö ‚¶Ü ‚ü® ‚ü¶ ‚ü¨ ‚ÅÖ ‚¶å ‚Äú ‚Äù ‚Äò ‚Äô ‚çò ‚¨Æ ‚¨Ø ‚¨≠ ‚¨¨ ‚¶É ‚èñ ‚èú ‚èù
Funcs: ‚ìë ‚ìß ‚í∏ ‚íû ‚®≠ ‚®¥ ‚∏Æ ‚Åá ‚Åâ ‚©• ‚ìú ‚í® ‚í∂ ‚ì¢ ‚ìï ‚í° ‚íª Ôº¶ ‚ì° ‚í≠ ‚ìî ‚í† ‚ìà ‚íÆ ‚®ù ‚åä ‚åô ‚åà ·¥ô ·¥ö
Arrow: ‚áè ‚Üõ ‚Ü™ ‚§§ ‚áù ‚áÄ ‚Üí
Regex: ‚©Ñ Ôπ© ‚ùõ ‚ùú ‚ë¥ ‚ëµ ‚ë∂ ‚äô ‚éñ Œ± ùö® êÑ´ ·∂å ‚ê§ ‚êâ ‚ëä ‚åø ‚çÄ
Opers: Àñ ‚ß∫ Àó ‚Ä° √ó √∑ Ÿ™ ¬´ ‚â™ ¬ª ‚â´ ‚´∏ ‚ãô Àú ‚çú ‚áî
Logic: ‚Äº ‚âî ‚â† ‚â§ ‚â• ‚Öã ‚àß ‚ãé ‚à® ‚äª
Loops: ‚Ü∫ ‚Üª
Num's: ¬≤ ¬≥ ‚Åø ‚àö ‚àõ ¬º ¬Ω ¬æ ‚Öê ‚Öë ‚Öí ‚Öì ‚Öî ‚Öï ‚Öñ ‚Öó ‚Öò ‚Öô ‚Öö ‚Öõ ‚Öú ‚Öù ‚Öû ·∂Ä ·∂ç`

//stack representation
var Œû=[],
		//I/O FUNCTIONS
		//---
		//*not shown: `√Ø = input, √Æ = √Ø[0], √≠ = √Ø[1], √¨ = √Ø[2]`*

		//-output
		√¥=i=>o.value+=i!=[]._?i:Œû.join`\n`,
		//---
		//get source code
		‚Ñπ=(i=0,j=c.value.length)=>[c.value.slice(i,j),Œû.push(i)][0],

		//STACK FUNCTIONS
		//---
		//- push
		·µñ=(i=0,...r)=>{Œû.push(i,...r)},
		//- get
		·µç=i=>i!=[]._?Œû[i<0?Œû.length+i:i]:Œû[Œû.length-1],
		//- remove
		 ≥=(i=Œû.length-1)=>Œû.splice(i,1),
		//- clear
		·∂ú=i=>Œû=[],

		//MORE ALIASES
		//---
		// 
		//CONSTANTS
		·∂ñ=Infinity,
		 â=[]._,
		‚Ñá=math.e,
		Œµ=Number.EPSILON,
		…∏=(1+math.sqrt(5))/2,
		œÄ=math.pi,
		œÑ=math.pi*2,
		//BUILT-IN OBJECTS
		–ú=math,
		œö=String,
		·∂ä=s,
		—¶=Array,
		—®=_,
		–ü=Number,
		√ò=Object,
		 ù=JSON,
		…º=RegExp,
		‚±§=XRegExp,
		·∂Å=Date,
		◊©=window,
		·∂Ç=Function,
		//FUNCTIONS
		√ü='toString',
		Íùà='length',
		·∂è='apply',
		//- general-purpose map
		‚±Æ=(i,f,s='',j='')=>typeof i=='object'?i.map(f):typeof i=='string'?i.split(s).map(f).join(j):eval((''+i).split(s).map(f).join(j)),
		√´=eval,
		·µ¥='',
		’Ö='0b',
		÷É='0x',
		//ALPHABETS
		·∂ê='ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		·∂õ='abcdefghijklmnopqrstuvwxyz',
		//CANVAS
		∆á=new Pen('cv'),
		//NUMBERS
		//aliases for 0-256; get number alias using `nchars[NUMBER]`
		nchars=`·∏Ä·∏Å·∏Ç·∏É·∏Ñ·∏Ö·∏Ü·∏á·∏à·∏â·∏ä·∏ã·∏å·∏ç·∏é·∏è·∏ê·∏ë·∏í·∏ì·∏î·∏ï·∏ñ·∏ó·∏ò·∏ô·∏ö·∏õ·∏ú·∏ù·∏û·∏ü·∏†·∏°·∏¢·∏£·∏§·∏•·∏¶·∏ß·∏®·∏©·∏™·∏´·∏¨·∏≠·∏Æ·∏Ø·∏∞·∏±·∏≤·∏≥·∏¥·∏µ·∏∂·∏∑·∏∏·∏π·∏∫·∏ª·∏º·∏Ω·∏æ·∏ø·πÄ·πÅ·πÇ·πÉ·πÑ·πÖ·πÜ·πá·πà·πâ·πä·πã·πå·πç·πé·πè·πê·πë·πí·πì·πî·πï·πñ·πó·πò·πô·πö·πõ·πú·πù·πû·πü·π†·π°·π¢·π£·π§·π•·π¶·πß·π®·π©·π™·π´·π¨·π≠·πÆ·πØ·π∞·π±·π≤·π≥·π¥·πµ·π∂·π∑·π∏·ππ·π∫·πª·πº·πΩ·πæ·πø·∫Ä·∫Å·∫Ç·∫É·∫Ñ·∫Ö·∫Ü·∫á·∫à·∫â·∫ä·∫ã·∫å·∫ç·∫é·∫è·∫ê·∫ë·∫í·∫ì·∫î·∫ï·∫ñ·∫ó·∫ò·∫ôa æ·∫õ·∫ú·∫ù·∫û·∫ü·∫†·∫°·∫¢·∫£·∫§·∫•·∫¶·∫ß·∫®·∫©·∫™·∫´·∫¨·∫≠·∫Æ·∫Ø·∫∞·∫±·∫≤·∫≥·∫¥·∫µ·∫∂·∫∑·∫∏·∫π·∫∫·∫ª·∫º·∫Ω·∫æ·∫ø·ªÄ·ªÅ·ªÇ·ªÉ·ªÑ·ªÖ·ªÜ·ªá·ªà·ªâ·ªä·ªã·ªå·ªç·ªé·ªè·ªê·ªë·ªí·ªì·ªî·ªï·ªñ·ªó·ªò·ªô·ªö·ªõ·ªú·ªù·ªû·ªü·ª†·ª°·ª¢·ª£·ª§·ª•·ª¶·ªß·ª®·ª©·ª™·ª´·ª¨·ª≠·ªÆ·ªØ·ª∞·ª±·ª≤·ª≥·ª¥·ªµ·ª∂·ª∑·ª∏·ªπ·ª∫·ªª·ªº·ªΩ·ªæ·ªø`
;
//---
//fix parentheses functions - borrowed from Japt (Thanks!)
var subparen=e=>{for(var r=0,n=0,t=0;t<e.length;t++)"("==e[t]&&r++,")"==e[t]&&(r--,n=Math.min(n,r));return 0>n&&(e="(".repeat(-n)+e,r-=n),r>0&&(e+=")".repeat(r)),e},
		fixParens=e=>{for(var a="",r="next",n="",s="",t="",c=0,b=0;b<e.length;b++)switch(n=e[b],r){case"next":";"==n?(a+=subparen(s)+n,s=""):"["==n?(r="array",c=0):"{"==n?(r="brackets",c=0):s+=n;break;case"array":"["==n?c++:"]"==n&&c--,0>c?(s+="["+fixParens(t)+"]",t="",r="next"):t+=n;break;case"brackets":"{"==n?c++:"}"==n&&c--,0>c?(s+="{"+t+"}",t="",r="next"):t+=n}return a+=subparen(s)}
//---
//compression functions
shoco.c=i=>Array.prototype.map.call(shoco.compress(i),x=>String.fromCharCode(x)).join``;
shoco.d=i=>shoco.decompress(new Uint8Array((i.constructor==Array?i[0]:i).split``.map(x=>x.charCodeAt(0))));
var compress=i=>LZString.compress(shoco.c(i));

//TIME TO INTERPRET!
//---
var Œ£=c=>{
	var 
	//- functions
	r='·µñ·µç ≥√¥‚Ñπ…òœö—¶–ü√ò—®…º‚±§∆í·∂Å‚±Æ·¥ô’Ñ·∂ä√´√ü·∂è\\u00f8-\\u0236',
			//- these don't need surrounding parens
			n='A-Za-z$_√£√Ø√Æ√≠√¨ƒ´·∂ñ â‚ÑáŒµ·¥â…∏œÄœÑ·∂ê·µ¥·∂õ¬≤¬≥‚Åø‚àö‚àõ¬º¬Ω¬æ‚Öê‚Öë‚Öí‚Öì‚Öî‚Öï‚Öñ‚Öó‚Öò‚Öô‚Öö‚Öõ‚Öú‚Öù‚Öû·∂Ä·∂ç\\u1e00-\\u1eff',
			//- real numbers regex
			d='-?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d+)?';

	//TRANSPILE ùîºùïäùïÑùïöùïü => ES6
	//
	//fix parentheses after 1st-stage transpilation
	c=fixParens(c
							//COMPRESSION
							.replace(/…ò(.+)#*/g,(x,y)=>shoco.d(LZString.decompress(y)))
							.replace(/—ç([^]+)#*/gm,(x,y)=>shoco.d(y))
							.replace(/–≠(.+)#*/g,(x,y)=>LZString.decompress(y))
							//eval-paste block; evaluates code, then pastes result directly in place of block
							.replace(/‚èú(.*)‚èù/g,(x,y)=>eval(y))
							.replace(eval(`/‚èñ(${n}+)/g`),(x,y)=>eval(y))
							//alias for 10; can be used with zeroes series
							.replace(/‚Ö©/g,'10')
							//ZEROES
							.replace(/‚Ñç/g,'00')
							.replace(/ùïú/g,'000')
							.replace(/ùïÑ/g,'000000')
							.replace(/ùîæ/g,'000000000')
							.replace(/ùïã/g,'000000000000')
							.replace(/‚Ñô/g,'000000000000000')
							.replace(/ùîº/g,'000000000000000000')
							.replace(/‚Ñ§/g,'000000000000000000000')
							.replace(/ùïê/g,'000000000000000000000000')
							//`('')+` - good for string coercion
							.replace(/‚äï/g,'‚¨Ø+')
							//`.join('')`
							.replace(/‚®ù/g,'√º‚¨Ø')
							//`.toString(2)`
							.replace(/‚ìë/g,'√ü2')
							//`.toString(16)`
							.replace(/‚ìß/g,'√ü16')
							//`String.fromCharCode`
							.replace(/‚í∏/g,'œöƒé')
							//`.charCodeAt()`
							.replace(/‚íû/g,'ƒÄ‚¨Æ')
							//`.filter(($,_,√£)=>`
							.replace(/‚ìï/g,'ƒä‚áÄ')
							.replace(/‚í°/g,'ƒä‚áÄ$')
							//`.map(($,_,√£)=>`
							.replace(/‚ìú/g,'ƒâ‚áÄ')
							.replace(/‚í®/g,'ƒâ‚áÄ$')
							//`.reduce(($,_,√£)=>`
							.replace(/‚ì°/g,'ƒã‚áÄ')
							.replace(/‚í≠/g,'ƒã‚áÄ$')
							//`.every(($,_,√£)=>`
							.replace(/‚ìî/g,'ƒé‚áÄ')
							.replace(/‚í†/g,'ƒé‚áÄ$')
							//`.some(($,_,√£)=>`
							.replace(/‚ìà/g,'ƒç‚áÄ')
							.replace(/‚íÆ/g,'ƒç‚áÄ$')
							//`.find(($,_,√£)=>`
							.replace(/‚íª/g,'ƒè‚áÄ')
							.replace(/Ôº¶/g,'ƒè‚áÄ$')
							//`.split('')`
							.replace(/‚ì¢/g,'ƒî‚¨Ø')
							//`[...Array(n)]`
							.replace(eval(`/‚í∂(([${n}]|\\d)+)/g`),'‚ü¶—¶($1)]')
							//`.reverse()` (string)
							.replace(/·¥ô/g,'ƒ®‚¨Æ')
							//`.reverse()` (array)
							.replace(/·¥ö/g,'√Ω‚¨Æ')
							//`math.sum`
							.replace(/‚®≠/g,'–ú∆∫')
							//`math.prod`
							.replace(/‚®¥/g,'–ú∆∑')
							//`_.range`
							.replace(/‚©•/g,'—®≈É')
							//`math.random`
							.replace(/‚∏Æ/g,'–ú∆®')
							//`math.randomInt`
							.replace(/‚Åá/g,'–ú∆©')
							//`math.pickRandom`
							.replace(/‚Åâ/g,'–ú∆ß')
							//`math.floor`
							.replace(/‚åä/g,'–ú≈®')
							//`math.round`
							.replace(/‚åô/g,'–ú∆ß')
							//`math.ceil`
							.replace(/‚åà/g,'–ú∆ß')
							//function argument aliases
							.replace(/‚¨Æ/g,'()')
							.replace(/‚¨Ø/g,'(``)')
							.replace(/‚¨≠/g,'(` `)')
							.replace(/‚¨¨/g,'(`\n`)')
							//whitespace aliases - also useful for regex
							.replace(/‚ê§/g,'\n')
							.replace(/‚êâ/g,'\t')
							.replace(/‚ê†/g,'\s')
							//one-char string; can be used as function argument
							.replace(/‚çò(.)/g,'(`$1`)')
							//PARENTHETICAL ARROW FUNCTIONS
							.replace(/‚áù/g,'((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z)=>')
							.replace(/‚áÄ/g,'(($,_,√£)=>')
							//ARGUMENT PARSER: turns `‚ÅΩabc 5` into `(a,b,c,5)`.
							.replace(/‚éù/g,`=‚ÅΩ`)
							//PARENTHETICAL ARGUMENT PARSER
							.replace(/‚éõ/g,'(‚ÅΩ')
							.replace(eval(`/‚ÅΩ(([${n}]|\\d)+)/g`),(x,y)=>`(${y.split(/\s|/g)})`)
							//.apply(window,
							.replace(/¬™/g,'·∂è◊©,')
							//AUTO-ADD PARENTHESES
							.replace(eval(`/([${r}])(([${n}]|${d})+)/g`),'$1($2)')
							.replace(eval(`/([${r}])([^(\u00f8-\u0236√üÍùà·∂è¬§])/g`),'$1($2')
							//prevents object from turning into a function
							.replace(/¬§/g,'')
							//AUTO-ADD BRACKETS
							.replace(eval(`/‚éñ(([${n}]|\\d)+)/g`),'[$1]')
							.replace(/([√Ø√Æ√≠√¨])(\d+)/g,'$1[$2]')
							//MORE ARROW FUNCTIONS
							.replace(/‚áè/g,'(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z)=>')
							.replace(/‚Üõ/g,'=(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z)=>')
							.replace(/‚Ü™/g,'($,_,√£)=>')
							.replace(/‚§§/g,'=($,_,√£)=>')
							.replace(/‚Üí/g,'=>')
							//array shorthand
							.replace(eval(`/‚ü®(([${n}]|\\d)+)/g`),(x,y)=>`[${y.split(/\s|/g)}]`)
							//PARENTHESES
							.replace(/‚Äú/g,'(`')
							.replace(/‚Äù/g,'`)')
							.replace(/‚Äò/g,'\\`')
							.replace(/‚Äô/g,'\\`)')
							.replace(/‚∏©/g,'))')
							.replace(/‚éû/g,'/)')
							.replace(/‚¶å/g,'])')
							//template string start
							.replace(/‚¶É/g,'${')
							//SPREAD OPERATORS
							.replace(/‚Ä¶/g,'...')
							.replace(eval(`/‚ü¨([${n}]+)/g`),'[...$1]')
							.replace(/‚ü¶/g,'[...')
							//ASSIGNMENT OPERATORS
							.replace(/Àñ/g,'+=')
							.replace(/‚ß∫/g,'++')
							.replace(/Àó/g,'-=')
							.replace(/‚Ä°/g,'--')
							.replace(/√ó/g,'*=')
							.replace(/√∑/g,'/=')
							.replace(/Ÿ™/g,'%=')
							.replace(/‚â™/g,'<<=')
							.replace(/‚â´/g,'>>=')
							.replace(/‚ãô/g,'>>>=')
							.replace(/‚àß/g,'&=')
							.replace(/‚äª/g,'^=')
							.replace(/‚à®/g,'|=')
							.replace(eval(`/(${n})‚áî/g`),'$1=$1')
							//LOGIC
							.replace(/‚Äº/g,'!!')
							.replace(/‚âî/g,'==')
							.replace(/‚â†/g,'!=')
							.replace(/‚â§/g,'<=')
							.replace(/‚â•/g,'>=')
							.replace(/‚Öã/g,'&&')
							.replace(/‚ãé/g,'||')
							//more keywords
							.replace(/·∂â/g,'return ')
							.replace(/‚Çô/g,'new ')
							.replace(/·ï†/g,'this')
							//EXPONENTS/ROOTS
							.replace(eval(`/(‚¶Ö.+|(([${n}]|${d})+))¬≤/g`),'math.pow($1,2)')
							.replace(eval(`/(‚¶Ö.+|(([${n}]|${d})+))¬≥/g`),'math.pow($1,3)')
							.replace(eval(`/(‚¶Ö.+|(([${n}]|${d})+))‚Åø(.+‚¶Ü|(([${n}]|${d}|\s)+))/g`),'math.pow($1,$4)')
							.replace(eval(`/‚àö(.+‚¶Ü|(([${n}]|${d})+))/g`),'math.sqrt($1)')
							.replace(eval(`/‚àõ(.+‚¶Ü|(([${n}]|${d})+))/g`),'math.cbrt($1)')
							.replace(/[‚¶Ö‚¶Ü]/g,'')
							//FRACTIONS
							.replace(/¬Ω/g,'.5')
							.replace(/¬º/g,'.25')
							.replace(/¬æ/g,'.75')
							.replace(/‚Öê/g,'(1/7)')
							.replace(/‚Öë/g,'(1/9)')
							.replace(/‚Öí/g,'.1')
							.replace(/‚Öì/g,'(1/3)')
							.replace(/‚Öî/g,'(2/3)')
							.replace(/‚Öï/g,'.2')
							.replace(/‚Öñ/g,'.4')
							.replace(/‚Öó/g,'.6')
							.replace(/‚Öò/g,'.8')
							.replace(/‚Öô/g,'(1/6)')
							.replace(/‚Öö/g,'(5/6)')
							.replace(/‚Öõ/g,'.125')
							.replace(/‚Öú/g,'.375')
							.replace(/‚Öù/g,'.625')
							.replace(/‚Öû/g,'.875')
							//BINARY/HEX PREFIXES
							.replace(/·∂Ä/g,'0b')
							.replace(/·∂ç/g,'0x')
							//AUTO-FORMAT FUNCTION NAMES
							.replace(/([^.])([\u00f8-\u0236])/g,'$1["$2"]')
							.replace(/([√üÍùà·∂è])/g,'[$1]')
							//REGEX
							.replace(/‚©Ñ/g,'$$&')
							.replace(/Ôπ©/g,'$$$')
							.replace(/‚ùõ/g,'$$`')
							.replace(/‚ùú/g,"$$'")
							.replace(/‚ë¥/g,'$1')
							.replace(/‚ëµ/g,'$2')
							.replace(/‚ë∂/g,'$3')
							.replace(/‚äô/g,'(.)')
							.replace(/‚ÅÖ/g,'[^')
							.replace(/Œ±/g,'a-z')
							.replace(/ùö®/g,'A-Z')
							.replace(/êÑ´/g,'0-9')
							.replace(/·∂å/g,'aeiou')
							.replace(/‚åø/g,'/g')
							.replace(/‚çÄ/g,'/ig')
							.replace(/‚ëä/g,'\\')
							//some more keywords
							.replace(/‚ä®/g,'true')
							.replace(/‚ä≠/g,'false')
							.replace(/‚êÄ/g,'null')
							//BITSHIFTS
							.replace(/¬´/g,'<<')
							.replace(/¬ª/g,'>>')
							.replace(/‚´∏/g,'>>>')
							//bitwise rounding
							.replace(/Àú/g,'0|')
							.replace(/‚çú/g,'|0')
							//WHILE LOOP
							.replace(/‚Üª/g,'while(')
						 )
	//FOR LOOP (@ = end parentheses)
		.replace(/‚Ü∫/g,'for(')
		.replace(/([^\\])@/g,'$1)');

	//OUTPUT
	//---
	//- implicit (stack) output
	if(!c.match(/√¥/g)&&c.match(/·µñ/g)){c+=';√¥()',console.log(c),eval(c);return}
	//- implicit output
	else if(Œû.length<1&&!c.match(/√¥/g)){console.log(c),o.value=eval(c);return}
	//- explicit output
	else console.log(c),eval(c);
}